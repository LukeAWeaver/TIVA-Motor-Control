/*--Task_PWM.c
 *
 *  Author:			Luke Weaver
 *	Organization:	KU/EECS/EECS 388
 *  Date:			February 22, 2016
 *
 *  Description:	Configures PWM using Timers on Tiva TMC41294 Evaluation board
 *
 */

#include	<stddef.h>
#include	<stdbool.h>
#include	<stdint.h>
#include	<stdarg.h>

#include "inc/hw_types.h"
#include "inc/hw_gpio.h"
#include "inc/hw_memmap.h"
#include "inc/hw_uart.h"
#include "inc/hw_timer.h"

#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "driverlib/pwm.h"
#include "driverlib/timer.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"
#include "Task_PWM.h"
#include "FreeRTOS.h"
#include "task.h"

uint32_t Pulse_Width;
uint32_t frequency;

uint32_t servoPW;
uint32_t servoPeriod;

unsigned long period;
uint32_t	USR_SW1Data;
uint32_t	USR_SW2Data;
uint32_t    SW1_Pressed;
uint32_t    SW2_Pressed;
extern void Task_PWM( void *pvParameters ) {

	servoPeriod = 120000000/3200; //20ms
	servoPW = servoPeriod/10; //2ms

	Pulse_Width = 10;
	period = 2000;
	frequency = 500;
	SW1_Pressed= 0;
	SW2_Pressed = 0;
	SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOG); //port G
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF); //port F

	//SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC |   SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);


	HWREG(GPIO_PORTG_AHB_BASE+GPIO_O_LOCK) = GPIO_LOCK_KEY; //dont use GPIO use function
	HWREG(GPIO_PORTG_AHB_BASE+GPIO_O_CR) |= GPIO_PIN_1;

	GPIOPinConfigure(GPIO_PG1_M0PWM5); //pg p1
	GPIOPinConfigure(GPIO_PG0_M0PWM4); //pg p1
	GPIOPinConfigure(GPIO_PF0_M0PWM0); //pg p1

	GPIOPinTypePWM(GPIO_PORTG_BASE, GPIO_PIN_1);
	GPIOPinTypePWM(GPIO_PORTG_BASE, GPIO_PIN_0);
	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_0);

	PWMClockSet(PWM0_BASE, PWM_SYSCLK_DIV_64);


	PWMGenConfigure(PWM0_BASE, PWM_GEN_3, (PWM_GEN_MODE_DOWN | PWM_GEN_MODE_NO_SYNC));
	PWMGenConfigure(PWM0_BASE, PWM_GEN_0, (PWM_GEN_MODE_DOWN | PWM_GEN_MODE_NO_SYNC));

	PWMGenPeriodSet(PWM0_BASE, PWM_GEN_3, servoPeriod);
	PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0, servoPeriod);

	PWMPulseWidthSet(PWM0_BASE, PWM_OUT_5, (servoPW));
	PWMPulseWidthSet(PWM0_BASE, PWM_OUT_4, (servoPW));
	PWMPulseWidthSet(PWM0_BASE, PWM_OUT_0, (servoPW));

	PWMGenEnable(PWM0_BASE, PWM_GEN_3);
	PWMGenEnable(PWM0_BASE, PWM_GEN_0);

	PWMOutputState(PWM0_BASE, (PWM_OUT_5_BIT), true);
	PWMOutputState(PWM0_BASE, (PWM_OUT_4_BIT), true);
	PWMOutputState(PWM0_BASE, (PWM_OUT_0_BIT), true);







	while (1) {
		if(servoPW == servoPeriod/10) //if equals 2ms
		servoPW = servoPeriod/20; //1ms
		else
		servoPW+=servoPeriod/200; //+=.1ms

		PWMPulseWidthSet(PWM0_BASE, PWM_OUT_5, (servoPW));
		PWMPulseWidthSet(PWM0_BASE, PWM_OUT_4, (servoPW));
		PWMPulseWidthSet(PWM0_BASE, PWM_OUT_0, (servoPW));
		UARTprintf("%d \n",servoPW);
		vTaskDelay( ( 1 * configTICK_RATE_HZ ));     //  10000/500 = 20 tics. configTICK_RATE_HZ defines 10,000 tics a second  returns integer, which is why at larger frequency values we cannot hear a difference in tone
	}
}
